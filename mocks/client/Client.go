// Code generated by mockery v2.32.2. DO NOT EDIT.

package mocks

import (
	model "github.com/ergomake/layerform/internal/data/model"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// CreateLayer provides a mock function with given fields: _a0
func (_m *Client) CreateLayer(_a0 *model.Layer) (*model.Layer, error) {
	ret := _m.Called(_a0)

	var r0 *model.Layer
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Layer) (*model.Layer, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*model.Layer) *model.Layer); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Layer)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Layer) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_CreateLayer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLayer'
type Client_CreateLayer_Call struct {
	*mock.Call
}

// CreateLayer is a helper method to define mock.On call
//   - _a0 *model.Layer
func (_e *Client_Expecter) CreateLayer(_a0 interface{}) *Client_CreateLayer_Call {
	return &Client_CreateLayer_Call{Call: _e.mock.On("CreateLayer", _a0)}
}

func (_c *Client_CreateLayer_Call) Run(run func(_a0 *model.Layer)) *Client_CreateLayer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Layer))
	})
	return _c
}

func (_c *Client_CreateLayer_Call) Return(_a0 *model.Layer, _a1 error) *Client_CreateLayer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_CreateLayer_Call) RunAndReturn(run func(*model.Layer) (*model.Layer, error)) *Client_CreateLayer_Call {
	_c.Call.Return(run)
	return _c
}

// GetLayer provides a mock function with given fields: name
func (_m *Client) GetLayer(name string) (*model.Layer, error) {
	ret := _m.Called(name)

	var r0 *model.Layer
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Layer, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Layer); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Layer)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetLayer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLayer'
type Client_GetLayer_Call struct {
	*mock.Call
}

// GetLayer is a helper method to define mock.On call
//   - name string
func (_e *Client_Expecter) GetLayer(name interface{}) *Client_GetLayer_Call {
	return &Client_GetLayer_Call{Call: _e.mock.On("GetLayer", name)}
}

func (_c *Client_GetLayer_Call) Run(run func(name string)) *Client_GetLayer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_GetLayer_Call) Return(_a0 *model.Layer, _a1 error) *Client_GetLayer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetLayer_Call) RunAndReturn(run func(string) (*model.Layer, error)) *Client_GetLayer_Call {
	_c.Call.Return(run)
	return _c
}

// GetLayerState provides a mock function with given fields: layer, instance
func (_m *Client) GetLayerState(layer *model.Layer, instance string) ([]byte, error) {
	ret := _m.Called(layer, instance)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Layer, string) ([]byte, error)); ok {
		return rf(layer, instance)
	}
	if rf, ok := ret.Get(0).(func(*model.Layer, string) []byte); ok {
		r0 = rf(layer, instance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Layer, string) error); ok {
		r1 = rf(layer, instance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetLayerState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLayerState'
type Client_GetLayerState_Call struct {
	*mock.Call
}

// GetLayerState is a helper method to define mock.On call
//   - layer *model.Layer
//   - instance string
func (_e *Client_Expecter) GetLayerState(layer interface{}, instance interface{}) *Client_GetLayerState_Call {
	return &Client_GetLayerState_Call{Call: _e.mock.On("GetLayerState", layer, instance)}
}

func (_c *Client_GetLayerState_Call) Run(run func(layer *model.Layer, instance string)) *Client_GetLayerState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Layer), args[1].(string))
	})
	return _c
}

func (_c *Client_GetLayerState_Call) Return(_a0 []byte, _a1 error) *Client_GetLayerState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetLayerState_Call) RunAndReturn(run func(*model.Layer, string) ([]byte, error)) *Client_GetLayerState_Call {
	_c.Call.Return(run)
	return _c
}

// SaveLayerState provides a mock function with given fields: layer, instance, state
func (_m *Client) SaveLayerState(layer *model.Layer, instance string, state []byte) error {
	ret := _m.Called(layer, instance, state)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Layer, string, []byte) error); ok {
		r0 = rf(layer, instance, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_SaveLayerState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveLayerState'
type Client_SaveLayerState_Call struct {
	*mock.Call
}

// SaveLayerState is a helper method to define mock.On call
//   - layer *model.Layer
//   - instance string
//   - state []byte
func (_e *Client_Expecter) SaveLayerState(layer interface{}, instance interface{}, state interface{}) *Client_SaveLayerState_Call {
	return &Client_SaveLayerState_Call{Call: _e.mock.On("SaveLayerState", layer, instance, state)}
}

func (_c *Client_SaveLayerState_Call) Run(run func(layer *model.Layer, instance string, state []byte)) *Client_SaveLayerState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Layer), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *Client_SaveLayerState_Call) Return(_a0 error) *Client_SaveLayerState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_SaveLayerState_Call) RunAndReturn(run func(*model.Layer, string, []byte) error) *Client_SaveLayerState_Call {
	_c.Call.Return(run)
	return _c
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
