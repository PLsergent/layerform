// Code generated by mockery v2.32.2. DO NOT EDIT.

package mocks

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// CommandExecutor is an autogenerated mock type for the CommandExecutor type
type CommandExecutor struct {
	mock.Mock
}

type CommandExecutor_Expecter struct {
	mock *mock.Mock
}

func (_m *CommandExecutor) EXPECT() *CommandExecutor_Expecter {
	return &CommandExecutor_Expecter{mock: &_m.Mock}
}

// Run provides a mock function with given fields: name, args
func (_m *CommandExecutor) Run(name string, args ...string) (int, error) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...string) (int, error)); ok {
		return rf(name, args...)
	}
	if rf, ok := ret.Get(0).(func(string, ...string) int); ok {
		r0 = rf(name, args...)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string, ...string) error); ok {
		r1 = rf(name, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommandExecutor_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type CommandExecutor_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - name string
//   - args ...string
func (_e *CommandExecutor_Expecter) Run(name interface{}, args ...interface{}) *CommandExecutor_Run_Call {
	return &CommandExecutor_Run_Call{Call: _e.mock.On("Run",
		append([]interface{}{name}, args...)...)}
}

func (_c *CommandExecutor_Run_Call) Run(run func(name string, args ...string)) *CommandExecutor_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *CommandExecutor_Run_Call) Return(_a0 int, _a1 error) *CommandExecutor_Run_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CommandExecutor_Run_Call) RunAndReturn(run func(string, ...string) (int, error)) *CommandExecutor_Run_Call {
	_c.Call.Return(run)
	return _c
}

// SetDir provides a mock function with given fields: dir
func (_m *CommandExecutor) SetDir(dir string) {
	_m.Called(dir)
}

// CommandExecutor_SetDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDir'
type CommandExecutor_SetDir_Call struct {
	*mock.Call
}

// SetDir is a helper method to define mock.On call
//   - dir string
func (_e *CommandExecutor_Expecter) SetDir(dir interface{}) *CommandExecutor_SetDir_Call {
	return &CommandExecutor_SetDir_Call{Call: _e.mock.On("SetDir", dir)}
}

func (_c *CommandExecutor_SetDir_Call) Run(run func(dir string)) *CommandExecutor_SetDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *CommandExecutor_SetDir_Call) Return() *CommandExecutor_SetDir_Call {
	_c.Call.Return()
	return _c
}

func (_c *CommandExecutor_SetDir_Call) RunAndReturn(run func(string)) *CommandExecutor_SetDir_Call {
	_c.Call.Return(run)
	return _c
}

// SetStderr provides a mock function with given fields: stderr
func (_m *CommandExecutor) SetStderr(stderr io.Writer) {
	_m.Called(stderr)
}

// CommandExecutor_SetStderr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetStderr'
type CommandExecutor_SetStderr_Call struct {
	*mock.Call
}

// SetStderr is a helper method to define mock.On call
//   - stderr io.Writer
func (_e *CommandExecutor_Expecter) SetStderr(stderr interface{}) *CommandExecutor_SetStderr_Call {
	return &CommandExecutor_SetStderr_Call{Call: _e.mock.On("SetStderr", stderr)}
}

func (_c *CommandExecutor_SetStderr_Call) Run(run func(stderr io.Writer)) *CommandExecutor_SetStderr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Writer))
	})
	return _c
}

func (_c *CommandExecutor_SetStderr_Call) Return() *CommandExecutor_SetStderr_Call {
	_c.Call.Return()
	return _c
}

func (_c *CommandExecutor_SetStderr_Call) RunAndReturn(run func(io.Writer)) *CommandExecutor_SetStderr_Call {
	_c.Call.Return(run)
	return _c
}

// SetStdin provides a mock function with given fields: stdin
func (_m *CommandExecutor) SetStdin(stdin io.Reader) {
	_m.Called(stdin)
}

// CommandExecutor_SetStdin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetStdin'
type CommandExecutor_SetStdin_Call struct {
	*mock.Call
}

// SetStdin is a helper method to define mock.On call
//   - stdin io.Reader
func (_e *CommandExecutor_Expecter) SetStdin(stdin interface{}) *CommandExecutor_SetStdin_Call {
	return &CommandExecutor_SetStdin_Call{Call: _e.mock.On("SetStdin", stdin)}
}

func (_c *CommandExecutor_SetStdin_Call) Run(run func(stdin io.Reader)) *CommandExecutor_SetStdin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Reader))
	})
	return _c
}

func (_c *CommandExecutor_SetStdin_Call) Return() *CommandExecutor_SetStdin_Call {
	_c.Call.Return()
	return _c
}

func (_c *CommandExecutor_SetStdin_Call) RunAndReturn(run func(io.Reader)) *CommandExecutor_SetStdin_Call {
	_c.Call.Return(run)
	return _c
}

// SetStdout provides a mock function with given fields: stdout
func (_m *CommandExecutor) SetStdout(stdout io.Writer) {
	_m.Called(stdout)
}

// CommandExecutor_SetStdout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetStdout'
type CommandExecutor_SetStdout_Call struct {
	*mock.Call
}

// SetStdout is a helper method to define mock.On call
//   - stdout io.Writer
func (_e *CommandExecutor_Expecter) SetStdout(stdout interface{}) *CommandExecutor_SetStdout_Call {
	return &CommandExecutor_SetStdout_Call{Call: _e.mock.On("SetStdout", stdout)}
}

func (_c *CommandExecutor_SetStdout_Call) Run(run func(stdout io.Writer)) *CommandExecutor_SetStdout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Writer))
	})
	return _c
}

func (_c *CommandExecutor_SetStdout_Call) Return() *CommandExecutor_SetStdout_Call {
	_c.Call.Return()
	return _c
}

func (_c *CommandExecutor_SetStdout_Call) RunAndReturn(run func(io.Writer)) *CommandExecutor_SetStdout_Call {
	_c.Call.Return(run)
	return _c
}

// NewCommandExecutor creates a new instance of CommandExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommandExecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommandExecutor {
	mock := &CommandExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
