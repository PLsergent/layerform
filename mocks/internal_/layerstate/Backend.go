// Code generated by mockery v2.32.2. DO NOT EDIT.

package mocks

import (
	layerstate "github.com/ergomake/layerform/internal/layerstate"
	mock "github.com/stretchr/testify/mock"
)

// Backend is an autogenerated mock type for the Backend type
type Backend struct {
	mock.Mock
}

type Backend_Expecter struct {
	mock *mock.Mock
}

func (_m *Backend) EXPECT() *Backend_Expecter {
	return &Backend_Expecter{mock: &_m.Mock}
}

// GetState provides a mock function with given fields: layerName, stateName
func (_m *Backend) GetState(layerName string, stateName string) (*layerstate.State, error) {
	ret := _m.Called(layerName, stateName)

	var r0 *layerstate.State
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*layerstate.State, error)); ok {
		return rf(layerName, stateName)
	}
	if rf, ok := ret.Get(0).(func(string, string) *layerstate.State); ok {
		r0 = rf(layerName, stateName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*layerstate.State)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(layerName, stateName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Backend_GetState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetState'
type Backend_GetState_Call struct {
	*mock.Call
}

// GetState is a helper method to define mock.On call
//   - layerName string
//   - stateName string
func (_e *Backend_Expecter) GetState(layerName interface{}, stateName interface{}) *Backend_GetState_Call {
	return &Backend_GetState_Call{Call: _e.mock.On("GetState", layerName, stateName)}
}

func (_c *Backend_GetState_Call) Run(run func(layerName string, stateName string)) *Backend_GetState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Backend_GetState_Call) Return(_a0 *layerstate.State, _a1 error) *Backend_GetState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Backend_GetState_Call) RunAndReturn(run func(string, string) (*layerstate.State, error)) *Backend_GetState_Call {
	_c.Call.Return(run)
	return _c
}

// SaveState provides a mock function with given fields: layerName, stateName, bytes
func (_m *Backend) SaveState(layerName string, stateName string, bytes []byte) error {
	ret := _m.Called(layerName, stateName, bytes)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []byte) error); ok {
		r0 = rf(layerName, stateName, bytes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Backend_SaveState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveState'
type Backend_SaveState_Call struct {
	*mock.Call
}

// SaveState is a helper method to define mock.On call
//   - layerName string
//   - stateName string
//   - bytes []byte
func (_e *Backend_Expecter) SaveState(layerName interface{}, stateName interface{}, bytes interface{}) *Backend_SaveState_Call {
	return &Backend_SaveState_Call{Call: _e.mock.On("SaveState", layerName, stateName, bytes)}
}

func (_c *Backend_SaveState_Call) Run(run func(layerName string, stateName string, bytes []byte)) *Backend_SaveState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *Backend_SaveState_Call) Return(_a0 error) *Backend_SaveState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Backend_SaveState_Call) RunAndReturn(run func(string, string, []byte) error) *Backend_SaveState_Call {
	_c.Call.Return(run)
	return _c
}

// NewBackend creates a new instance of Backend. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBackend(t interface {
	mock.TestingT
	Cleanup(func())
}) *Backend {
	mock := &Backend{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
