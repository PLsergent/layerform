// Code generated by mockery v2.32.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// Apply provides a mock function with given fields: dir, state
func (_m *Client) Apply(dir string, state []byte) ([]byte, error) {
	ret := _m.Called(dir, state)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []byte) ([]byte, error)); ok {
		return rf(dir, state)
	}
	if rf, ok := ret.Get(0).(func(string, []byte) []byte); ok {
		r0 = rf(dir, state)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []byte) error); ok {
		r1 = rf(dir, state)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_Apply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Apply'
type Client_Apply_Call struct {
	*mock.Call
}

// Apply is a helper method to define mock.On call
//   - dir string
//   - state []byte
func (_e *Client_Expecter) Apply(dir interface{}, state interface{}) *Client_Apply_Call {
	return &Client_Apply_Call{Call: _e.mock.On("Apply", dir, state)}
}

func (_c *Client_Apply_Call) Run(run func(dir string, state []byte)) *Client_Apply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte))
	})
	return _c
}

func (_c *Client_Apply_Call) Return(_a0 []byte, _a1 error) *Client_Apply_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_Apply_Call) RunAndReturn(run func(string, []byte) ([]byte, error)) *Client_Apply_Call {
	_c.Call.Return(run)
	return _c
}

// Destroy provides a mock function with given fields: dir, state
func (_m *Client) Destroy(dir string, state []byte) ([]byte, error) {
	ret := _m.Called(dir, state)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []byte) ([]byte, error)); ok {
		return rf(dir, state)
	}
	if rf, ok := ret.Get(0).(func(string, []byte) []byte); ok {
		r0 = rf(dir, state)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []byte) error); ok {
		r1 = rf(dir, state)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_Destroy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Destroy'
type Client_Destroy_Call struct {
	*mock.Call
}

// Destroy is a helper method to define mock.On call
//   - dir string
//   - state []byte
func (_e *Client_Expecter) Destroy(dir interface{}, state interface{}) *Client_Destroy_Call {
	return &Client_Destroy_Call{Call: _e.mock.On("Destroy", dir, state)}
}

func (_c *Client_Destroy_Call) Run(run func(dir string, state []byte)) *Client_Destroy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte))
	})
	return _c
}

func (_c *Client_Destroy_Call) Return(_a0 []byte, _a1 error) *Client_Destroy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_Destroy_Call) RunAndReturn(run func(string, []byte) ([]byte, error)) *Client_Destroy_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields: dir
func (_m *Client) Init(dir string) error {
	ret := _m.Called(dir)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(dir)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type Client_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - dir string
func (_e *Client_Expecter) Init(dir interface{}) *Client_Init_Call {
	return &Client_Init_Call{Call: _e.mock.On("Init", dir)}
}

func (_c *Client_Init_Call) Run(run func(dir string)) *Client_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_Init_Call) Return(_a0 error) *Client_Init_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Init_Call) RunAndReturn(run func(string) error) *Client_Init_Call {
	_c.Call.Return(run)
	return _c
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
